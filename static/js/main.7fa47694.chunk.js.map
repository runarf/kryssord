{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","wordsByCountLetters","setWordsByCountLetters","loading","setLoading","fetchHtml","word","a","length","fetch","then","res","json","html","window","history","replaceState","style","display","flexDirection","justifyContent","Search","onFocus","event","target","select","allowClear","size","enterButton","onSearch","value","onPressEnter","padding","map","words","countLetters","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA0EeA,MArEf,WAAgB,IAAD,EACyCC,mBAAS,IADlD,mBACNC,EADM,KACeC,EADf,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIPC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACI,IAAhBD,EAAKE,OADO,wDAKhBJ,GAAW,GALK,SAMGK,MAAM,GAAD,OAZZ,4CAYY,OAAiBH,IAAQI,MAAK,SAACC,GAAD,OAASA,EAAIC,UANnD,OAMVC,EANU,OAOhBC,OAAOC,QAAQC,aAAa,GAAIV,EAAMA,GACtCF,GAAW,GACXF,EAAuBW,GATP,2CAAH,sDAWf,OACE,qBAAKI,MAAO,GAAZ,SACE,sBACEA,MAAO,CACLC,QAAS,OACTC,cAAe,UAHnB,UAOE,qBAAKF,MAAO,CAAEC,QAAS,OAAQE,eAAgB,UAA/C,SACE,qBAAKH,MAAO,GAAZ,SACE,cAAC,IAAMI,OAAP,CACEC,QAAS,SAACC,GAAD,OAAWA,EAAMC,OAAOC,UACjCC,YAAU,EACVvB,QAASA,EACTwB,KAAK,QACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAWzB,EAAUyB,IAC/BC,aAAc,SAACR,GACbA,EAAMC,OAAOC,SACbpB,EAAUkB,EAAMC,OAAOM,cAK/B,qBACEb,MAAO,CACLC,QAAS,OAETc,QAAS,OAJb,SAOG/B,EAAoBgC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACjC,OACE,sBAAwBlB,MAAO,CAAEe,QAAS,OAA1C,UACE,8BACE,gCAAMG,EAAN,SAEF,8BACE,8BACGD,EAAMD,KAAI,SAAC3B,GAAD,OACT,8BAAMA,aAPJ6B,cC1CTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7fa47694.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Input } from \"antd\";\n\nconst backendUrl = `https://salty-gorge-71940.herokuapp.com/`; // `http://localhost:5000/`;\n\nfunction App() {\n  const [wordsByCountLetters, setWordsByCountLetters] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchHtml = async (word) => {\n    if (word.length === 0) {\n      return;\n    }\n    // const encodedWord encodeURIComponent(word)\n    setLoading(true);\n    const html = await fetch(`${backendUrl}${word}`).then((res) => res.json());\n    window.history.replaceState({}, word, word);\n    setLoading(false);\n    setWordsByCountLetters(html);\n  };\n  return (\n    <div style={{}}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          // justifyContent: \"center\",\n        }}\n      >\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div style={{}}>\n            <Input.Search\n              onFocus={(event) => event.target.select()}\n              allowClear\n              loading={loading}\n              size=\"large\"\n              enterButton=\"Search\"\n              onSearch={(value) => fetchHtml(value)}\n              onPressEnter={(event) => {\n                event.target.select();\n                fetchHtml(event.target.value);\n              }}\n            />\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            // justifyContent: \"center\",\n            padding: \"4px\",\n          }}\n        >\n          {wordsByCountLetters.map(({ words, countLetters }) => {\n            return (\n              <div key={countLetters} style={{ padding: \"4px\" }}>\n                <div>\n                  <div>{countLetters} </div>\n                </div>\n                <div>\n                  <div>\n                    {words.map((word) => (\n                      <div>{word}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}