{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","wordsByCountLetters","setWordsByCountLetters","loading","setLoading","fetchHtml","word","a","length","fetch","then","res","json","html","window","history","replaceState","style","width","display","flexDirection","justifyContent","Search","onFocus","event","target","select","allowClear","size","enterButton","onSearch","value","onPressEnter","padding","map","words","countLetters","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAqEeA,MAlEf,WAAgB,IAAD,EACyCC,mBAAS,IADlD,mBACNC,EADM,KACeC,EADf,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIPC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACI,IAAhBD,EAAKE,OADO,wDAKhBJ,GAAW,GALK,SAMGK,MAAM,yBAAD,OAA0BH,IAAQI,MAAK,SAACC,GAAD,OAC7DA,EAAIC,UAPU,OAMVC,EANU,OAShBC,OAAOC,QAAQC,aAAa,GAAIV,EAAMA,GACtCF,GAAW,GACXF,EAAuBW,GAXP,2CAAH,sDAaf,OACE,sBACEI,MAAO,CACLC,MAAO,OACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,UALpB,UAQE,qBAAKJ,MAAO,CAAEE,QAAS,OAAQE,eAAgB,UAA/C,SACE,qBAAKJ,MAAO,CAAEC,MAAO,SAArB,SACE,cAAC,IAAMI,OAAP,CACEC,QAAS,SAACC,GAAD,OAAWA,EAAMC,OAAOC,UACjCC,YAAU,EACVxB,QAASA,EACTyB,KAAK,QACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAW1B,EAAU0B,IAC/BC,aAAc,SAACR,GACbA,EAAMC,OAAOC,SACbrB,EAAUmB,EAAMC,OAAOM,cAK/B,qBACEd,MAAO,CAAEE,QAAS,OAAQE,eAAgB,SAAUY,QAAS,OAD/D,SAGGhC,EAAoBiC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACjC,OACE,sBAAwBnB,MAAO,CAAEgB,QAAS,OAA1C,UACE,8BACE,gCAAMG,EAAN,SAEF,8BACE,8BACGD,EAAMD,KAAI,SAAC5B,GAAD,OACT,8BAAMA,aAPJ8B,YCtCPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5ac80d64.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Input } from \"antd\";\n\nfunction App() {\n  const [wordsByCountLetters, setWordsByCountLetters] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchHtml = async (word) => {\n    if (word.length === 0) {\n      return;\n    }\n    // const encodedWord encodeURIComponent(word)\n    setLoading(true);\n    const html = await fetch(`http://localhost:5000/${word}`).then((res) =>\n      res.json()\n    );\n    window.history.replaceState({}, word, word);\n    setLoading(false);\n    setWordsByCountLetters(html);\n  };\n  return (\n    <div\n      style={{\n        width: \"120%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n    >\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <div style={{ width: \"300px\" }}>\n          <Input.Search\n            onFocus={(event) => event.target.select()}\n            allowClear\n            loading={loading}\n            size=\"large\"\n            enterButton=\"Search\"\n            onSearch={(value) => fetchHtml(value)}\n            onPressEnter={(event) => {\n              event.target.select();\n              fetchHtml(event.target.value);\n            }}\n          />\n        </div>\n      </div>\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", padding: \"4px\" }}\n      >\n        {wordsByCountLetters.map(({ words, countLetters }) => {\n          return (\n            <div key={countLetters} style={{ padding: \"4px\" }}>\n              <div>\n                <div>{countLetters} </div>\n              </div>\n              <div>\n                <div>\n                  {words.map((word) => (\n                    <div>{word}</div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}