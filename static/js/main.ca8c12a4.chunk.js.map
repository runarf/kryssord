{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","wordsByCountLetters","setWordsByCountLetters","loading","setLoading","searchRef","useRef","fetchHtml","word","a","current","input","select","length","fetch","then","res","json","html","window","history","replaceState","style","overflow","height","position","top","left","Search","ref","onFocus","event","target","allowClear","size","enterButton","onSearch","value","display","padding","map","words","countLetters","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoEeA,MA/Df,WAAgB,IAAD,EACyCC,mBAAS,IADlD,mBACNC,EADM,KACeC,EADf,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAGPC,EAAYC,mBAEZC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDAChBJ,EAAUK,QAAQC,MAAMC,SACJ,IAAhBJ,EAAKK,OAFO,wDAKhBT,GAAW,GALK,SAMGU,MAAM,GAAD,OAbZ,4CAaY,OAAiBN,IAAQO,MAAK,SAACC,GAAD,OAASA,EAAIC,UANnD,OAMVC,EANU,OAOhBC,OAAOC,QAAQC,aAAa,GAAIb,EAAMA,GACtCJ,GAAW,GACXF,EAAuBgB,GATP,4CAAH,sDAWf,OACE,sBAAKI,MAAO,CAAEC,SAAU,OAAQC,OAAQ,SAAxC,UACE,qBACEF,MAAO,CACLG,SAAU,SACVC,IAAK,IACLC,KAAM,KAJV,SAOE,cAAC,IAAMC,OAAP,CACEC,IAAKxB,EACLyB,QAAS,SAACC,GAAD,OAAWA,EAAMC,OAAOpB,UACjCqB,YAAU,EACV9B,QAASA,EACT+B,KAAK,QACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAW9B,EAAU8B,QAGnC,qBACEf,MAAO,CACLgB,QAAS,OAETC,QAAS,OAJb,SAOGtC,EAAoBuC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACjC,OACE,sBAAwBpB,MAAO,CAAEiB,QAAS,OAA1C,UACE,8BACE,gCAAMG,EAAN,SAEF,8BACE,8BACGD,EAAMD,KAAI,SAAChC,GAAD,OACT,8BAAMA,aAPJkC,YCrCPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ca8c12a4.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport { Input } from \"antd\";\n\nconst backendUrl = `https://salty-gorge-71940.herokuapp.com/`; // `http://localhost:5000/`;\n\nfunction App() {\n  const [wordsByCountLetters, setWordsByCountLetters] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const searchRef = useRef();\n\n  const fetchHtml = async (word) => {\n    searchRef.current.input.select();\n    if (word.length === 0) {\n      return;\n    }\n    setLoading(true);\n    const html = await fetch(`${backendUrl}${word}`).then((res) => res.json());\n    window.history.replaceState({}, word, word);\n    setLoading(false);\n    setWordsByCountLetters(html);\n  };\n  return (\n    <div style={{ overflow: \"auto\", height: \"100vh\" }}>\n      <div\n        style={{\n          position: \"sticky\",\n          top: \"0\",\n          left: \"0\",\n        }}\n      >\n        <Input.Search\n          ref={searchRef}\n          onFocus={(event) => event.target.select()}\n          allowClear\n          loading={loading}\n          size=\"large\"\n          enterButton=\"Search\"\n          onSearch={(value) => fetchHtml(value)}\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          // justifyContent: \"center\",\n          padding: \"4px\",\n        }}\n      >\n        {wordsByCountLetters.map(({ words, countLetters }) => {\n          return (\n            <div key={countLetters} style={{ padding: \"4px\" }}>\n              <div>\n                <div>{countLetters} </div>\n              </div>\n              <div>\n                <div>\n                  {words.map((word) => (\n                    <div>{word}</div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}